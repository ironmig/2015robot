// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Lifter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

Lifter::Lifter() : Subsystem("Lifter") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	winch = RobotMap::lifterWinch;
	hallEffectSensor = RobotMap::lifterHallEffectSensor;
	bottomSwitch = RobotMap::lifterBottomSwitch;
	spineLights = RobotMap::lifterSpineLights;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Levels = 0;
	lastState = false;
	curState = false;
	stopAtBottom = true;

	speed=0;
}
    
void Lifter::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Lifter::Stop() {
	Set(0);
	SetLightOff();
}
void Lifter::Lower() {
	Set(-1);
}
void Lifter::Raise() {
	Set(1);
}
void Lifter::Set(float x) {
	x=-x; //Reverse x because motor is reversed

	if (BottomHit() && stopAtBottom && x>0) {
		winch->Set(0);
		speed = 0;
		return;
	}

	winch->Set(x);

}
void Lifter::UpdateLevel() {
	curState = MagnetHit();
	if (curState && !lastState) { //if the magnet is currently hit, but it wasn't hit last check
		if (speed>0) Levels++; //if winch is going up, increment level
		else Levels--; //if winch is going down or off (sometimes it falls), decrement level
	}
	lastState = curState;
}
bool Lifter::MagnetHit() {
	return !hallEffectSensor->Get();
}
void Lifter::ResetLevels() {
	Levels = 0;
}
bool Lifter::BottomHit() {
	return !bottomSwitch->Get();
}
void Lifter::SetLightOn() {
	spineLights->Set(Relay::kForward);
}
void Lifter::SetLightOff() {
	spineLights->Set(Relay::kOff);
}
