// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
#include "Commands/GrabContainerAndBackup.h"
#include "Commands/AutoToteContainerStack.h"
#include "Commands/MoveForwardAndTurn.h"
#include "Commands/DoNothingAuto.h"

#include "Robot.h"
//#include "arm/include/OpenCV/opencv2/opencv.hpp"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Chassis* Robot::chassis = 0;
LedStrip* Robot::ledStrip = 0;
Grabber* Robot::grabber = 0;
Lifter* Robot::lifter = 0;
Lasso* Robot::lasso = 0;
OI* Robot::oi = 0;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION

void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	chassis = new Chassis();
	ledStrip = new LedStrip();
	grabber = new Grabber();
	lifter = new Lifter();
	lasso = new Lasso();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

	oi = new OI();
	lw = LiveWindow::GetInstance();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

	driveWithJoysticks = new DriveWithJoysticks();
	lifterWithJoystick = new LifterWithJoystick();

	//CameraServer::GetInstance()->StartAutomaticCapture("cam0");

	autonomousCommand = new GrabContainerAndBackup();

	//Autonomous choosing
	autoChooser = new SendableChooser();
	autoChooser->AddDefault("Container or Tote", new GrabContainerAndBackup() );
	autoChooser->AddObject("Move Forward",new MoveForwardAndTurn()) ;
	autoChooser->AddObject("Stack", new AutoToteContainerStack());
	autoChooser->AddObject("Do Nothing (lame)", new DoNothingAuto());
	SmartDashboard::PutData("Auto Program", autoChooser);

	SmartDashboard::PutBoolean("Bottom hit", false);
	SmartDashboard::PutBoolean("Hall effect sensor",false);
	SmartDashboard::PutBoolean("Stop at bottom",true);

	SmartDashboard::PutBoolean("In Pit Mode",false);
}

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit () {
	Scheduler::GetInstance()->RemoveAll();
	grabber->Stop();
	chassis->Stop();
	lifter->Stop();

	ledStrip->Set(0,1,1,0);
}
void Robot::DisabledPeriodic() {

}


void Robot::AutonomousInit() {
	lifter->spineLights->Set(Relay::kOff);
	ledStrip->Set(0,0,0,0);
	autonomousCommand = (Command*) autoChooser->GetSelected();
	//autonomousCommand  = new AutoToteContainerStack();
	autonomousCommand->Start();
}
void Robot::AutonomousPeriodic() {
	//lifter->UpdateLevel();

	Scheduler::GetInstance()->Run();
}
void Robot::TeleopInit() {
	lifter->spineLights->Set(Relay::kOff);
	ledStrip->Set(0,0,1,0);
	if ( autonomousCommand->IsRunning() ) autonomousCommand->Cancel();

	/*
	if (oi->getSonicButton()) { //if the initial buttons are hit when entering telleop
		SmartDashboard::PutBoolean("In Pit Mode",true);
		while(!oi->getSonicDisable() && !lifter->MagnetHit()) { //while robot is not disabled, the magnet sensor is not hit, and the robot is not disabled, wait
			Wait(0.05);
		}
	}
	*/

	grabber->airCompressor->Start();
	driveWithJoysticks->Start();
	lifterWithJoystick->Start();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
	//SmartDashboard::PutNumber("Lifter",lifter->Levels);

	if (oi->getStickRight()->GetRawButton(9)) lifter->stopAtBottom = false;
	else if (oi->getStickRight()->GetRawButton(8)) lifter->stopAtBottom = true;

	SmartDashboard::PutBoolean("Bottom hit", lifter->BottomHit());
	SmartDashboard::PutBoolean("Hall effect sensor",lifter->MagnetHit());
	SmartDashboard::PutBoolean("Stop at bottom",lifter->stopAtBottom);

	//SmartDashboard::PutBoolean("Pressure switch", grabber->airCompressor->GetPressureSwitchValue());
	//lifter->UpdateLevel();
}
void Robot::TestInit() {

}
void Robot::TestPeriodic() {
	lw->Run();
}
START_ROBOT_CLASS(Robot);

