// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "PlayMacro1.h"

PlayMacro1::PlayMacro1() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::grabber);
	Requires(Robot::lifter);
	FileName="";
}
PlayMacro1::PlayMacro1(std::string fileName) {
	Requires(Robot::chassis);
	Requires(Robot::grabber);
	Requires(Robot::lifter);
	FileName = fileName;
}
// Called just before this Command runs the first time
void PlayMacro1::Initialize() {
	if (Robot::mac1->GetRecordCommand()->IsRunning()) Robot::mac1->GetRecordCommand()->Cancel();

	if(!FileName.empty()) {
		Robot::mac1->Reset();
		Robot::mac1->ReadFile(FileName);
	}
}

// Called repeatedly when this Command is scheduled to run
void PlayMacro1::Execute() {
	Robot::mac1->PlayBack();
}

// Make this return true when this Command no longer needs to run execute()
bool PlayMacro1::IsFinished() {
	return Robot::mac1->IsFinished();
}

// Called once after isFinished returns true
void PlayMacro1::End() {
	Robot::mac1->PlayReset();
	if (Robot::getInstance().IsOperatorControl()) {
		if (Robot::oi->driveWithJoysticks->IsCanceled()) Robot::oi->driveWithJoysticks->Start();
		if (Robot::oi->lifterWithJoystick->IsCanceled()) Robot::oi->lifterWithJoystick->Start();
	}
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void PlayMacro1::Interrupted() {
	End();
}
