// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "StartCameraCapture.h"

//Small miracle if this works
/*
static void VisionFunction() {
	Mat frame;
	Mat rgba;
	VideoCapture vidcap;
	Image* myImaqImage = imaqCreateImage(IMAQ_IMAGE_RGB,  0);
	vidcap.open(0);
	if (!vidcap.isOpened()) {
		cout << "OpenCV could not open webcam!!" << endl;
		return;
	} else cout << "Found camera!!" << endl;

	while(true)
	{
		vidcap >> frame;

		cv::cvtColor(frame, rgba, CV_BGR2BGRA, 4);
		int rc = imaqArrayToImage(myImaqImage, rgba.data, frame.cols, frame.rows);

		if(rc != 1)
			return;

		CameraServer::GetInstance()->SetImage(myImaqImage);
	}

}
*/
StartCameraCapture::StartCameraCapture() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // create an image
	/*
	frame = imaqCreateImage(IMAQ_IMAGE_RGB, 0);
	//the camera name (ex "cam0") can be found through the roborio web interface
	imaqError = IMAQdxOpenCamera("cam0", IMAQdxCameraControlModeController, &session);
	if(imaqError != IMAQdxErrorSuccess) {
		DriverStation::ReportError("IMAQdxOpenCamera error: " + std::to_string((long)imaqError) + "\n");
	}
	imaqError = IMAQdxConfigureGrab(session);
	if(imaqError != IMAQdxErrorSuccess) {
		DriverStation::ReportError("IMAQdxConfigureGrab error: " + std::to_string((long)imaqError) + "\n");
	}
	*/
}

// Called just before this Command runs the first time
void StartCameraCapture::Initialize() {
	//IMAQdxStartAcquisition(session);
	CameraServer::GetInstance()->StartAutomaticCapture("cam0");
	//visionTask = new Task("Vision",(FUNCPTR)VisionFunction,Task::kDefaultPriority);
	//visionTask->Start();
}

// Called repeatedly when this Command is scheduled to run
void StartCameraCapture::Execute() {
	/*
	IMAQdxGrab(session, frame, true, NULL);
	if(imaqError != IMAQdxErrorSuccess) {
		DriverStation::ReportError("IMAQdxGrab error: " + std::to_string((long)imaqError) + "\n");
	} else {
		CameraServer::GetInstance()->SetImage(frame);
	}
	*/
}

// Make this return true when this Command no longer needs to run execute()
bool StartCameraCapture::IsFinished() {
	//return false;
	return true;
}

// Called once after isFinished returns true
void StartCameraCapture::End() {
	//IMAQdxStopAcquisition(session);
	//visionTask->Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void StartCameraCapture::Interrupted() {
	End();
}
