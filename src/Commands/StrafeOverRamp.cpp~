// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "StrafeOverRamp.h"

StrafeOverRamp::StrafeOverRamp() {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::chassis);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

	overCount = 0; //How many times acceleromter limit has been hit
	timesOver = 2; //How many times accel needs to be hit to be done
	timeout = 4; //How long to wait if accelermoter not hits
	speed = 0.5;
	overThresh = 4;;
	SmartDashboard::PutNumber("timeout",timeout);
	SmartDashboard::PutNumber("speedOverRamp",speed);
	SmartDashboard::PutNumber("overThresh",overThresh);
	SmartDashboard::PutNumber("timesOver",timesOver);
	timer = new Timer();
	currentTime = 0;
}

// Called just before this Command runs the first time
void StrafeOverRamp::Initialize() {
	timeout = SmartDashboard::GetNumber("timeout",timeout);
	overThresh = SmartDashboard::GetNumber("overThresh",overThresh);
	timesOver = SmartDashboard::GetNumber("timesOver",timesOver);
	speed = SmartDashboard::GetNumber("speedOverRamp",speed);

	overCount = 0;

	Robot::chassis->Reset();

	Robot::chassis->DriveNormal(speed,0,0);

	timer->Reset();
	timer->Start();
	currentTime = 0;
}

// Called repeatedly when this Command is scheduled to run
void StrafeOverRamp::Execute() {
	currentTime = timer->Get();

	if ( fabs(RobotMap::BIA->GetZ()) > overThresh && currentTime >0.5) overCount++;

	SmartDashboard::PutNumber("Timer",currentTime);
	SmartDashboard::PutBoolean("Running Auto", true);
}


// Make this return true when this Command no longer needs to run execute()
bool StrafeOverRamp::IsFinished() {
	if (overCount >= timesOver) return true;
	if (currentTime >= timeout) return true;
	return false;
}

// Called once after isFinished returns true
void StrafeOverRamp::End() {
	SmartDashboard::PutBoolean("Running Auto", false);

	timer->Stop();
	timer->Reset();
	currentTime = 0;
	SmartDashboard::PutNumber("Timer",currentTime);
	Robot::chassis->Stop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void StrafeOverRamp::Interrupted() {
	End();
}
