// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Gyro* RobotMap::chassisGyroscope = NULL;
Encoder* RobotMap::chassisRightFrontEncoder = NULL;
Encoder* RobotMap::chassisLeftFrontEncoder = NULL;
Encoder* RobotMap::chassisLeftRearEncoder = NULL;
Encoder* RobotMap::chassisRightRearEncoder = NULL;
SpeedController* RobotMap::chassisLeftFrontCtrl = NULL;
SpeedController* RobotMap::chassisLeftRearCtrl = NULL;
SpeedController* RobotMap::chassisRightFrontCtrl = NULL;
SpeedController* RobotMap::chassisRightRearCtrl = NULL;
RobotDrive* RobotMap::chassisDriveSystem = NULL;
DigitalOutput* RobotMap::ledStripPin0 = NULL;
DigitalOutput* RobotMap::ledStripPin1 = NULL;
DigitalOutput* RobotMap::ledStripPin2 = NULL;
DigitalOutput* RobotMap::ledStripPin3 = NULL;
Compressor* RobotMap::grabberAirCompressor = NULL;
DoubleSolenoid* RobotMap::grabberGrabberSolenoid = NULL;
SpeedController* RobotMap::lifterWinch = NULL;
DigitalInput* RobotMap::lifterHallEffectSensor = NULL;
DigitalInput* RobotMap::lifterBottomSwitch = NULL;
Relay* RobotMap::lifterSpineLights = NULL;
SpeedController* RobotMap::lassoLassoCtrl = NULL;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
PowerDistributionPanel* RobotMap::PDP = NULL;
BuiltInAccelerometer* RobotMap::BIA = NULL;

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	chassisGyroscope = new Gyro(0);
	lw->AddSensor("Chassis", "Gyroscope", chassisGyroscope);
	chassisGyroscope->SetSensitivity(0.007);
	chassisRightFrontEncoder = new Encoder(0, 20, false, Encoder::k1X);
	lw->AddSensor("Chassis", "RightFrontEncoder", chassisRightFrontEncoder);
	chassisRightFrontEncoder->SetDistancePerPulse(1.0);
        chassisRightFrontEncoder->SetPIDSourceParameter(Encoder::kRate);
	chassisLeftFrontEncoder = new Encoder(1, 19, true, Encoder::k1X);
	lw->AddSensor("Chassis", "LeftFrontEncoder", chassisLeftFrontEncoder);
	chassisLeftFrontEncoder->SetDistancePerPulse(1.0);
        chassisLeftFrontEncoder->SetPIDSourceParameter(Encoder::kRate);
	chassisLeftRearEncoder = new Encoder(2, 18, false, Encoder::k1X);
	lw->AddSensor("Chassis", "LeftRearEncoder", chassisLeftRearEncoder);
	chassisLeftRearEncoder->SetDistancePerPulse(1.0);
        chassisLeftRearEncoder->SetPIDSourceParameter(Encoder::kRate);
	chassisRightRearEncoder = new Encoder(3, 17, false, Encoder::k1X);
	lw->AddSensor("Chassis", "RightRearEncoder", chassisRightRearEncoder);
	chassisRightRearEncoder->SetDistancePerPulse(1.0);
        chassisRightRearEncoder->SetPIDSourceParameter(Encoder::kRate);
	chassisLeftFrontCtrl = new Talon(0);
	lw->AddActuator("Chassis", "LeftFrontCtrl", (Talon*) chassisLeftFrontCtrl);
	
	chassisLeftRearCtrl = new Talon(3);
	lw->AddActuator("Chassis", "LeftRearCtrl", (Talon*) chassisLeftRearCtrl);
	
	chassisRightFrontCtrl = new Talon(1);
	lw->AddActuator("Chassis", "RightFrontCtrl", (Talon*) chassisRightFrontCtrl);
	
	chassisRightRearCtrl = new Talon(2);
	lw->AddActuator("Chassis", "RightRearCtrl", (Talon*) chassisRightRearCtrl);
	
	chassisDriveSystem = new RobotDrive(chassisLeftFrontCtrl, chassisLeftRearCtrl,
              chassisRightFrontCtrl, chassisRightRearCtrl);
	
	chassisDriveSystem->SetSafetyEnabled(false);
        chassisDriveSystem->SetExpiration(0.1);
        chassisDriveSystem->SetSensitivity(0.5);
        chassisDriveSystem->SetMaxOutput(1.0);

        chassisDriveSystem->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
        chassisDriveSystem->SetInvertedMotor(RobotDrive::kRearRightMotor, true);
	ledStripPin0 = new DigitalOutput(4);
	lw->AddActuator("LedStrip", "Pin0", ledStripPin0);
	
	ledStripPin1 = new DigitalOutput(5);
	lw->AddActuator("LedStrip", "Pin1", ledStripPin1);
	
	ledStripPin2 = new DigitalOutput(6);
	lw->AddActuator("LedStrip", "Pin2", ledStripPin2);
	
	ledStripPin3 = new DigitalOutput(7);
	lw->AddActuator("LedStrip", "Pin3", ledStripPin3);
	
	grabberAirCompressor = new Compressor(1);
	
	
	grabberGrabberSolenoid = new DoubleSolenoid(1, 1, 0);      
	lw->AddActuator("Grabber", "GrabberSolenoid", grabberGrabberSolenoid);
	
	lifterWinch = new Victor(6);
	lw->AddActuator("Lifter", "Winch", (Victor*) lifterWinch);
	
	lifterHallEffectSensor = new DigitalInput(8);
	lw->AddSensor("Lifter", "HallEffectSensor", lifterHallEffectSensor);
	
	lifterBottomSwitch = new DigitalInput(9);
	lw->AddSensor("Lifter", "BottomSwitch", lifterBottomSwitch);
	
	lifterSpineLights = new Relay(3);
	lw->AddActuator("Lifter", "SpineLights", lifterSpineLights);
	
	lassoLassoCtrl = new Talon(5);
	lw->AddActuator("Lasso", "LassoCtrl", (Talon*) lassoLassoCtrl);
	


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	PDP = new PowerDistributionPanel();
	lw->AddSensor("Others","PDP",PDP);
	BIA = new BuiltInAccelerometer();
	lw->AddSensor("Others","BIA",BIA);
}
